package Forms;


import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Usuario
 */
public class FormListV2 extends javax.swing.JFrame {
    
    private ArrayList<Double> nota_1 = new ArrayList<>();
    private ArrayList<Double> nota_2 = new ArrayList<>();
    private ArrayList<String> nombreList = new ArrayList<>();
    private ArrayList<String> apellidoList = new ArrayList<>();
    private ArrayList<String> correoList = new ArrayList<>();
    private int count = 0;

    /**
     * Creates new form formList
     */
    public FormListV2() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("Gestor De Calificaciones");
        
        String[] columns = {"Nombres", "Apellidos", "Correo", "Nota 1", "Nota 2", "Promedio"};
        DefaultTableModel modelo = new DefaultTableModel(columns, 0);
        tabla.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNota1 = new javax.swing.JTextField();
        txtNota2 = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtHistorial = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        btnModificar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        txtEliminar = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        btnHistorial = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("CaskaydiaMono NF SemiBold", 1, 24)); // NOI18N
        jLabel2.setText("Formulario Notas");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel3.setFont(new java.awt.Font("CaskaydiaMono NF SemiBold", 0, 18)); // NOI18N
        jLabel3.setText("Nombre:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jLabel4.setFont(new java.awt.Font("CaskaydiaMono NF SemiBold", 0, 18)); // NOI18N
        jLabel4.setText("Correo Electronico");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, -1, -1));

        jLabel5.setFont(new java.awt.Font("CaskaydiaMono NF SemiBold", 0, 18)); // NOI18N
        jLabel5.setText("Nota 1");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, -1, -1));

        jLabel6.setFont(new java.awt.Font("CaskaydiaMono NF SemiBold", 0, 18)); // NOI18N
        jLabel6.setText("Nota 2");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 220, -1, -1));

        txtNota1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNota1ActionPerformed(evt);
            }
        });
        jPanel1.add(txtNota1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 250, 60, -1));

        txtNota2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNota2ActionPerformed(evt);
            }
        });
        jPanel1.add(txtNota2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 250, 60, -1));
        jPanel1.add(txtApellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 170, -1));

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        jPanel1.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 170, -1));

        btnAgregar.setFont(new java.awt.Font("CaskaydiaMono NF SemiBold", 1, 18)); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, -1, 30));

        txtHistorial.setColumns(20);
        txtHistorial.setRows(5);
        jScrollPane1.setViewportView(txtHistorial);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 290, 300));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tabla);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, 800, 650));

        btnModificar.setFont(new java.awt.Font("CaskaydiaMono NF SemiBold", 1, 18)); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel1.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, -1, -1));

        btnBuscar.setFont(new java.awt.Font("CaskaydiaMono NF SemiBold", 1, 18)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 330, 110, -1));

        btnEliminar.setFont(new java.awt.Font("CaskaydiaMono NF SemiBold", 1, 18)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 290, -1, -1));

        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 330, 90, 30));
        jPanel1.add(txtEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 290, 90, 30));

        jLabel7.setFont(new java.awt.Font("CaskaydiaMono NF SemiBold", 0, 18)); // NOI18N
        jLabel7.setText("Apellido:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));
        jPanel1.add(txtCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 270, -1));

        btnHistorial.setFont(new java.awt.Font("CaskaydiaMono NF SemiBold", 0, 18)); // NOI18N
        btnHistorial.setText("Limpiar Historial");
        btnHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistorialActionPerformed(evt);
            }
        });
        jPanel1.add(btnHistorial, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 700, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1250, 750));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNota1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNota1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNota1ActionPerformed

    private void txtNota2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNota2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNota2ActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        
        StringBuilder datos = new StringBuilder("Datos[" + count + "]: " + " \n");
        
        String nombreS = txtNombre.getText().trim();
        String apellidoS = txtApellido.getText().trim();
        String correoS = txtCorreo.getText().trim();
        boolean tieneArroba = false;
        boolean tienePunto = false;

        // Validar campos obligatorios
        if (nombreS.isEmpty() || apellidoS.isEmpty() || correoS.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Error: Todos los campos (Nombre, Apellido y Correo) son obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validación básica de correo electrónico
        /*
        if (!correoS.contains("@") || !correoS.contains(".")) {
            JOptionPane.showMessageDialog(this, "Error: Ingrese un correo electrónico válido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        */
        for (int i = 0; i < correoS.length(); i++) {
            char caracteres = correoS.charAt(i);
            
            if(caracteres == '@'){
                tieneArroba = true;
            }
            
            if(caracteres == '.'){
                tienePunto = true;
            }
            
        }
        
        if(tieneArroba == false){
            JOptionPane.showMessageDialog(this, "Error: Falta El Arroba @ en el Correo", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
         if(tienePunto == false){
            JOptionPane.showMessageDialog(this, "Error: Falta El Punto . en el Correo", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Agregar a las listas
        nombreList.add(nombreS);
        apellidoList.add(apellidoS);
        correoList.add(correoS);
        
        double nota1, nota2, promedio;
        if (txtNota1.getText().isEmpty() || txtNota2.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Error: No Pueden Estar Vacias Los Campos Nota1 y Nota2", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            try {
                nota1 = Double.parseDouble(txtNota1.getText());
                nota2 = Double.parseDouble(txtNota2.getText());
                
                if (nota1 >= 0 && nota1 <= 10 && nota2 >= 0 && nota2 <= 10) {
                    nota_1.add(nota1);
                    nota_2.add(nota2);
                } else {
                    JOptionPane.showMessageDialog(this, "Las Notas Deben Ser >= 0 y <= 10", "Info", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                // JOptionPane.showMessageDialog(this, "Apellido Ingresado Correctamente: " + apellidoS, "Info", JOptionPane.INFORMATION_MESSAGE);

                promedio = ((nota_1.get(count) + nota_2.get(count)) / 2);
                
                DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
                Object[] fila = {nombreS, apellidoS, correoS, nota1, nota2, promedio};
                modelo.addRow(fila);
                
                datos.append("Nombre[" + count + "]: " + nombreList.get(count) + " \n").append("Apellido[" + count + "]: " + apellidoList.get(count) + " \n").append("Nota1[" + count + "]: " + nota_1.get(count) + "\n").append("Nota2[" + count + "]: " + nota_2.get(count) + "\n").append("Promedio[" + count + "]: " + promedio + "\n").append("Correo Electronico[" + count + "]: " + correoS + "\n\n");
                
                txtHistorial.append(datos.toString());
                
                txtNombre.setText("");
                txtApellido.setText("");
                txtNota1.setText("");
                txtNota2.setText("");
                txtCorreo.setText("");
                
                count = count + 1;
                
                JOptionPane.showMessageDialog(this, "Datos Agregados Correctamente", "Exito", JOptionPane.INFORMATION_MESSAGE);
                
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // Verificar que haya una fila seleccionada
        
        StringBuilder datos = new StringBuilder("\nDato Modificado: ");
        int filaSeleccionada = tabla.getSelectedRow();
        
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Por favor selecciona una fila de la tabla para modificar", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validar que los campos no estén vacíos
        String nombreS = txtNombre.getText().trim();
        String apellidoS = txtApellido.getText().trim();
        String correoE = txtCorreo.getText().trim();
        
        if (nombreS.isEmpty() || apellidoS.isEmpty() || correoE.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Error: No Puede Estar Vacío, El Nombre Ni El Apellido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(!correoE.contains("@") || !correoE.contains(".")){
            JOptionPane.showMessageDialog(this, "Error: Falta @ y . en el correo electronico", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (txtNota1.getText().trim().isEmpty() || txtNota2.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Error: No Pueden Estar Vacías Los Campos Nota1 y Nota2", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            double nota1 = Double.parseDouble(txtNota1.getText().trim());
            double nota2 = Double.parseDouble(txtNota2.getText().trim());
            
            if (nota1 < 0 || nota1 > 10 || nota2 < 0 || nota2 > 10) {
                JOptionPane.showMessageDialog(this, "Las Notas Deben Ser >= 0 y <= 10", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Calcular promedio
            double promedio = (nota1 + nota2) / 2;

            // Modificar en las listas
            nombreList.set(filaSeleccionada, nombreS);
            apellidoList.set(filaSeleccionada, apellidoS);
            nota_1.set(filaSeleccionada, nota1);
            nota_2.set(filaSeleccionada, nota2);
            correoList.set(filaSeleccionada, correoE);

            // Modificar en la tabla
            DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
            modelo.setValueAt(nombreS, filaSeleccionada, 0);    // Columna Nombre
            modelo.setValueAt(apellidoS, filaSeleccionada, 1);  // Columna Apellido
            modelo.setValueAt(nota1, filaSeleccionada, 3);      // Columna Nota1
            modelo.setValueAt(nota2, filaSeleccionada, 4);      // Columna Nota2
            modelo.setValueAt(promedio, filaSeleccionada, 5);   // Columna Promedio
            modelo.setValueAt(correoE, filaSeleccionada, 2);    // Columna Correo
            
            datos.append("Nombre[" + count + "]: " + nombreList.get(count) + " \n").append("Apellido[" + count + "]: " + apellidoList.get(count) + " \n").append("Nota1[" + count + "]: " + nota_1.get(count) + "\n").append("Nota2[" + count + "]: " + nota_2.get(count) + "\n").append("Promedio[" + count + "]: " + promedio + "\n").append("Correo Electronico[" + count + "]: " + correoE + "\n\n");
            
            txtHistorial.append(datos.toString());

            // Limpiar campos
            txtNombre.setText("");
            txtApellido.setText("");
            txtNota1.setText("");
            txtNota2.setText("");
            txtCorreo.setText("");

            // Deseleccionar la fila
            tabla.clearSelection();
            
            JOptionPane.showMessageDialog(this, "Datos Modificados Correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error: Ingrese números válidos para las notas", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed

    }//GEN-LAST:event_txtBuscarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String key = txtBuscar.getText().trim();
        int idx = 0;
      
        
        if (key.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Porfavor ingrese un nombre para buscar", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        boolean encontrado = false;
        
        tabla.clearSelection();
        
        for (int i = 0; i < nombreList.size(); i++) {
            if (nombreList.get(i).equalsIgnoreCase(key) || apellidoList.get(i).equalsIgnoreCase(key)) {
                idx = i; 
                tabla.setRowSelectionInterval(i, i);
                tabla.scrollRectToVisible(tabla.getCellRect(i, 0, true));    
                encontrado = true;               
                break;
            }
        }
        
        if (!encontrado) {
            JOptionPane.showMessageDialog(this, "No se encontro ningun estudiante con ese nombre o apellido: " + key, "No Encontrado", JOptionPane.INFORMATION_MESSAGE);
        } else {
            txtBuscar.setText("");
            JOptionPane.showMessageDialog(this, "Estudiante Encontrado: " + nombreList.get(idx) + " " + apellidoList.get(idx) , "Encontrado", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed
    

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
            // Verificar si hay estudiantes para eliminar
            if (nombreList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay estudiantes para eliminar", "Lista Vacía", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            String keyEliminar = txtEliminar.getText().trim(); // Usar el campo txtEliminar
            int index = -1;
            String nombreCompleto = "";
            boolean encontrado = false;

            // Si hay una fila seleccionada
            if (tabla.getSelectedRow() != -1) {
                index = tabla.getSelectedRow();
                encontrado = true;
            } // Buscar por el campo txtEliminar
            else if (!keyEliminar.isEmpty()) {
                for (int i = 0; i < nombreList.size(); i++) {
                    if (nombreList.get(i).equalsIgnoreCase(keyEliminar) || apellidoList.get(i).equalsIgnoreCase(keyEliminar)) {
                        index = i;
                        encontrado = true;
                        break;
                    }
                }
                if (!encontrado) {
                    JOptionPane.showMessageDialog(this, "No se encontró ningún estudiante con el nombre: " + keyEliminar, "No Encontrado", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(this, "Para eliminar un estudiante, puede:\n"
                        + "1. Seleccionar una fila de la tabla\n"
                        + "2. Escribir un nombre en el campo junto al botón Eliminar\n", "Confirmacion", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // Confirmar eliminación
            String confirmarEliminacion = nombreList.get(index) + " " + apellidoList.get(index);
            int confirmacion = JOptionPane.showConfirmDialog(this,
                    "¿Está seguro de eliminar al estudiante?\n" + confirmarEliminacion,
                    "Confirmar Eliminación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            
            if (confirmacion == JOptionPane.YES_OPTION) {
                // Eliminar de las listas
                String nombreEliminado = nombreList.get(index) + " " + apellidoList.get(index);
                nombreList.remove(index);
                apellidoList.remove(index);
                nota_1.remove(index);
                nota_2.remove(index);

                // Eliminar de la tabla
                DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
                modelo.removeRow(index);

                // Limpiar campos y selección
                txtEliminar.setText("");
                tabla.clearSelection();

                // Decrementar el contador si es necesario
                count = Math.max(0, count - 1);
                
                JOptionPane.showMessageDialog(this, "Estudiante eliminado exitosamente:\n" + nombreEliminado, "Eliminación Exitosa", JOptionPane.INFORMATION_MESSAGE);
            }
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error inesperado: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }        
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistorialActionPerformed
       int confirm = JOptionPane.showConfirmDialog(this, "Desea Limpiar El Historial?", "Limpiar", JOptionPane.YES_NO_CANCEL_OPTION);
       
       if(confirm == JOptionPane.YES_OPTION){
           txtHistorial.setText("");
       }
    }//GEN-LAST:event_btnHistorialActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormListV2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormListV2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormListV2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormListV2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormListV2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnHistorial;
    private javax.swing.JButton btnModificar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtEliminar;
    private javax.swing.JTextArea txtHistorial;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNota1;
    private javax.swing.JTextField txtNota2;
    // End of variables declaration//GEN-END:variables
}
